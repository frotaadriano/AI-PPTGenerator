import os
import requests
from openai import AzureOpenAI
from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.responses import FileResponse
from pydantic import BaseModel
from typing import List
from dotenv import load_dotenv
import json
import time 
from pptx.util import Pt
from pptx.enum.shapes import MSO_SHAPE
from pptx.dml.color import RGBColor
from pptx import Presentation
from pptx.util import Inches, Pt 

# Load environment variables
load_dotenv()

# FastAPI app initialization
app = FastAPI()

# Azure OpenAI configuration
GPT4V_KEY = os.getenv("AZURE_OPENAI_API_KEY")
GPT4V_ENDPOINT = os.getenv("AZURE_OPENAI_ENDPOINT")
DEPLOYMENT_NAME = os.getenv("AZURE_DEPLOYMENT_NAME")
AZURE_OPENAI_API_KEY = os.getenv("AZURE_OPENAI_API_KEY")
AZURE_OPENAI_API_VERSION = os.getenv("AZURE_OPENAI_API_VERSION")

# Initialize the OpenAI client 
client = AzureOpenAI(
    azure_endpoint=GPT4V_ENDPOINT,
    api_key=AZURE_OPENAI_API_KEY,
    api_version=AZURE_OPENAI_API_VERSION,
)


client_dalle = AzureOpenAI(
        api_version = os.getenv("AZURE_DALLE_API_VERSION") ,
        azure_endpoint=os.getenv("AZURE_DALLE_ENDPOINT"),
        api_key=os.getenv("AZURE_DALLE_API_KEY"),
    )
    
    
    
class TextSummary(BaseModel):
    text: str

def call_azure_openai(text: str):
    message_text = [
        {"role": "system", "content": "Você é um assistente de IA que ajuda as pessoas a resumir textos para apresentações. Certifique-se de que o texto resumido seja claro, profissional e evite termos delicados ou problemáticos."},
        {"role": "user", "content": f"Resuma o seguinte texto de forma concisa e profissional, dividindo-o em seções apenas delimitadas por ####  para criar uma apresentação elegante em PowerPoint: {text}"}
    ]

    completion = client.chat.completions.create(
        model=DEPLOYMENT_NAME,
        messages=message_text,
        temperature=0.7,
        max_tokens=800,
        top_p=0.95
    )
    
    return completion

def generate_images(summary: str, delay: int = 5):
    # Dividir o summary em seções usando '####' como delimitador
    sections = summary.split('####')
    
    images = []
     
    try: 
        for section in sections:
            section = section.replace('- **', '').replace('**:', ':').replace('---', '')
            print(f"\n>>> section do loop:", section)
            # Limpar o texto da seção
            section = section.strip()
            if section:  # Ignorar se a seção estiver vazia
                prompt = f"Gere uma imagem limpa e sem texto para uma apresentação sobre o seguinte tópico: {section}. O estilo deve ser minimalista e profissional."
                result = client_dalle.images.generate(
                    #model="Dalle3",  # the name of your DALL-E 3 deployment
                    model="Dalle3",
                    prompt=prompt,
                    n=1,
                    size='1024x1024',                    
                )
                print('result:', result)
                image_url = json.loads(result.model_dump_json())['data'][0]['url']
                images.append(image_url)
                time.sleep(delay)
    except Exception as e:
        print(f"Error generating images: {e}")
    return images

    
def create_ppt(summary: str, images: List[str]):
    prs = Presentation()
    slide_layout = prs.slide_layouts[5]  # Choosing a blank slide layout

    # Add title slide
    slide = prs.slides.add_slide(slide_layout)
    title = slide.shapes.title
    title.text = "Generated Presentation"

    # Add footer to the title slide
    footer = slide.shapes.add_textbox(Inches(0.5), Inches(7), Inches(8.5), Inches(0.5))
    footer_frame = footer.text_frame
    footer_frame.text = "This presentation was automatically generated by AI."

    # Add content slides
    sections = summary.split('####')
    for idx, section in enumerate(sections):
        section = section.strip()
        if section:
            slide = prs.slides.add_slide(slide_layout)
            title = slide.shapes.title
            title.text = f"Slide {idx + 1}"

            # Split the section into lines
            lines = section.split('\n')
            header_text = lines[0].strip()
            content_text = '\n'.join(lines[1:]).strip()

            # Add header
            header_box = slide.shapes.add_textbox(Inches(0.5), Inches(0.5), Inches(8.5), Inches(1))
            header_frame = header_box.text_frame
            header_frame.text = header_text
            header_frame.paragraphs[0].font.size = Pt(24)
            header_frame.paragraphs[0].font.bold = True

            # Add content
            content_box = slide.shapes.add_textbox(Inches(0.5), Inches(1.5), Inches(5.0), Inches(4.5))
            content_frame = content_box.text_frame
            content_frame.text = content_text
            content_frame.paragraphs[0].font.size = Pt(18)

            if idx < len(images):
                # Add image if available
                response = requests.get(images[idx])
                if response.status_code == 200:
                    with open(f"image{idx}.jpg", "wb") as f:
                        f.write(response.content)
                    slide.shapes.add_picture(f"image{idx}.jpg", Inches(6), Inches(1.5), height=Inches(3))

            # Add footer
            footer = slide.shapes.add_textbox(Inches(0.5), Inches(7), Inches(8.5), Inches(0.5))
            footer_frame = footer.text_frame
            footer_frame.text = "This presentation was automatically generated by AI."

    pptx_file = "output_presentation.pptx"
    prs.save(pptx_file)
    return pptx_file

 
@app.post("/generate-ppt", response_class=FileResponse)
async def generate_ppt(file: UploadFile = File(...)):
    if file.filename.endswith(".txt"):
        content = await file.read()
        text = content.decode("utf-8")
        
        # Summarize text using GPT-4
        openai_response = call_azure_openai(text)
        # print('openai_response:', openai_response)
        summary = openai_response.choices[0].message.content.strip() # esta linha executa o strip() no texto que faz com 
        print('summary:', summary)  
        # return 'ok'
        
        
        # Generate images based on the summary
         
        images = generate_images(summary)
        print('images:', images)
        
        # Create PPT with the summarized text and images
        pptx_file = create_ppt(summary, images)
        
        return FileResponse(pptx_file, filename="generated_presentation.pptx")
    else:
        raise HTTPException(status_code=400, detail="Invalid file format. Only .txt files are accepted.")
